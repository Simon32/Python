#inorder
## iteratively       
def inorderTraversal(self, root):
    res, stack = [], []
    while True:
        while root:
            stack.append(root)
            root = root.left
        if not stack:
            return res
        node = stack.pop()
        res.append(node.val)
        root = node.right
## DFS
class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        res=[]
        self.dfs(root,res)
        return res
        
    def dfs(self,root,res):
        if root:
            self.dfs(root.left,res)
            self.dfs(root.right,res)
            res.append(root.val)
## use queue to do BFS   
